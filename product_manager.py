from product import Product  # Ensure this import statement is correct

class ProductManager:
    """
    ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏û‡∏¥‡πà‡∏°, ‡∏•‡∏ö, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤, ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
    """
    def __init__(self):
        self.products = {}

    def add_product(self, product: Product):
        if not product.product_id:
            print("‚ùå Error: Product ID cannot be empty!")
            return
        if product.product_id in self.products:
            print("‚ùå Error: Product ID already exists!")
        else:
            self.products[product.product_id] = product
            print("‚úÖ Product added successfully!")

    def remove_product(self, product_id: str):
        product_id = product_id.strip()
        if not product_id:
            print("‚ùå Error: Product ID cannot be empty!")
            return
        if product_id in self.products:
            del self.products[product_id]
            print("‚úÖ Product removed successfully!")
        else:
            print("‚ùå Error: Product not found!")

    def update_price(self, product_id: str, new_price: float):
        product_id = product_id.strip()
        if not product_id:
            print("‚ùå Error: Product ID cannot be empty!")
            return
        if product_id in self.products:
            self.products[product_id].price = max(new_price, 0.01)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö
            print("‚úÖ Product price updated successfully!")
        else:
            print("‚ùå Error: Product not found!")

    def show_products(self):
        if self.products:
            print("\nüì¶ Product List:")
            for product in self.products.values():
                print(product)
        else:
            print("‚ö†Ô∏è No products available.")